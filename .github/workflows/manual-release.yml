name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Run tests
        run: go test ./...

      - name: Generate version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Split the version
          IFS='.' read -r major minor patch <<< "${LATEST_TAG/v/}"
          
          # Calculate new version based on input
          if [[ "${{ github.event.inputs.version_type }}" == "major" ]]; then
            NEW_VERSION="v$((major+1)).0.0"
          elif [[ "${{ github.event.inputs.version_type }}" == "minor" ]]; then
            NEW_VERSION="v$major.$((minor+1)).0"
          else
            NEW_VERSION="v$major.$minor.$((patch+1))"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Creating new version: $NEW_VERSION"

      - name: Create tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a ${{ steps.version.outputs.new_version }} -m "Release ${{ steps.version.outputs.new_version }}"
          git push origin ${{ steps.version.outputs.new_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          generate_release_notes: true